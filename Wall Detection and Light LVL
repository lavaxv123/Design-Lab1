

#include <Wire.h>
#include <Adafruit_MotorShield.h>
#include "utility/Adafruit_PWMServoDriver.h"


Adafruit_MotorShield AFMS = Adafruit_MotorShield(); 



Adafruit_DCMotor *LeftMotor = AFMS.getMotor(3);
Adafruit_DCMotor *RightMotor = AFMS.getMotor(4);

int iniLight;
int bumper1 = 8;
int bumper2 = 10;
void setup() 
{
  AFMS.begin();  
  LeftMotor->setSpeed(100);
  LeftMotor->run(RELEASE);

  RightMotor->setSpeed(100);
  RightMotor->run(RELEASE);

 pinMode(bumper1, INPUT);
 delay(0);
 pinMode(bumper2, INPUT);
 delay(0);

 Serial.begin(9600);
 
 iniLight = analogRead(A4); //find the initial light level (calibration)
 Serial.print("Initial light level: ");
 delay(0);
 Serial.println(iniLight);
 delay(0);
}

bool wall_detection()   //funcrtion to find out if the mobile platform is in contact with the wall
{
  bool contact;       //true/false variable... in contact with wall, true - yes, false - no.
  int bumper1c = digitalRead(8);  //read the pin 8 to see if the bumper is depressed or not
  int bumper2c = digitalRead(10); //read the pin 10 to see if the bumper is depressed or not
  Serial.println();
  delay(0);
  Serial.print("Bumper 1 state: ");
  delay(0);
  Serial.println(bumper1c);
  delay(0);
  Serial.print("Bumper 2 state: ");
  delay(0);
  Serial.println(bumper2c);
  delay(0);
  Serial.println();
  delay(0);
  
  if ((bumper1c || bumper2c) == 0)
  {
    contact = true;   //if either bumper is pressed in, set contact equal to true
  }
  else
  {
    contact = false;  //if neither bumper is pressed in, set contact equal to false
  }

  return contact;
}

void loop() 
{
  int lightLvl = analogRead(A4);    //Photoresistor uses analog pin A4
  Serial.print("Light lvl: ");
  Serial.println(lightLvl);
  
  while(lightLvl > iniLight*2)      //while the light level is double the initial light level
   {   
      LeftMotor->run(RELEASE);
      RightMotor->run(RELEASE);
      lightLvl = analogRead(A4); 
   }
   
    LeftMotor->run(FORWARD);
    RightMotor->run(FORWARD);     

  bool x = wall_detection();
  if (x == true)
  {
    LeftMotor->run(RELEASE);
    RightMotor->run(RELEASE);
    delay(100);
    LeftMotor->run(BACKWARD);
    RightMotor->run(BACKWARD);//set the speed of the wheels for reverse.
    delay(2000);

    LeftMotor->run(RELEASE);
    RightMotor->run(RELEASE);
    delay(100);
    LeftMotor->run(FORWARD);
    delay(1000);                      
    RightMotor->run(FORWARD);
    
  }

  
}
